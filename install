#!/bin/bash

# pythonman - Python Version Manager - instalador

# Autor: Leonardo Bruno
# Contato: souzalb@proton.me
# Versão: 1.0
# Data: 01/06/2025

# Nome do arquivo alvo
TARGET="pythonman"

# Url arquivo pythonman
URL_DOWNLOAD="https://raw.githubusercontent.com/souza-lb/pythonman/main/pythonman"

# Pasta raiz pythonman
DIR_PYTHONMAN="$HOME/.pythonman"

# Pasta raiz versões python
DIR_PYTHON_VERSIONS="$DIR_PYTHONMAN/python_versions"

# Arquivo .bashrc
FILE_BASHRC="$HOME/.bashrc"

# Pasta temporária
TEMP_DIR=$(mktemp -d /tmp/pythonman-XXXXX)
CLEANUP_REQUIRED="yes"

# Função para limpeza manual
cleanup() {
    if [[ $CLEANUP_REQUIRED == "yes" && -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
        echo "Limpeza de arquivos temporários realizada!"
    fi
}

# Mensagem inicial
echo ""
echo "--------------------------------------------"
echo "     Instalação $TARGET versão 1.0          "
echo "--------------------------------------------"
echo ""
echo "1 - Verificar dependências"
echo "2 - Instalar dependências de compilação"
echo "3 - Criar estrutura de pastas"
echo "4 - Baixar o $TARGET"
echo "5 - Instalar em: '$DIR_PYTHONMAN'"
echo "6 - Configurar PATH no bashrc"
echo "7 - Realizar limpeza automática"
echo ""
echo "*Atenção! A senha do sudo poderá ser solicitada durante "
echo "  a instalação de dependências de compilação do Python!"
echo ""

# Verifica as dependências básicas
check_dependencies() {
    if ! command -v wget >/dev/null; then
        echo "Erro: wget não está instalado no sistema!"
        echo "Por favor, instale o wget antes de prosseguir!"
        cleanup
        exit 1
    fi
    
    if ! command -v tar >/dev/null; then
        echo "Erro: tar não está instalado no sistema!"
        echo "Por favor, instale o tar antes de prosseguir!"
        cleanup
        exit 1
    fi
    
    echo "Dependências básicas verificadas: wget e tar encontrados."
    return 0
}

# Instala dependências de compilação
install_compilation_dependencies() {
    echo "Instalando dependências de compilação para Python..."
    echo "A senha do sudo poderá ser solicitada nesta etapa!"
    
    if command -v apt-get >/dev/null; then
        echo "Detectado sistema baseado em Debian/Ubuntu..."
        sudo apt-get update
        sudo apt-get install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev libbz2-dev
        
    elif command -v dnf >/dev/null; then
        echo "Detectado sistema baseado em Fedora/RHEL..."
        sudo dnf groupinstall -y "Development Tools"
        sudo dnf install -y zlib-devel ncurses-devel openssl-devel readline-devel sqlite-devel gdbm-devel libffi-devel bzip2-devel
        
    elif command -v yum >/dev/null; then
        echo "Detectado sistema baseado em CentOS/RHEL..."
        sudo yum groupinstall -y "Development Tools"
        sudo yum install -y zlib-devel ncurses-devel openssl-devel readline-devel sqlite-devel gdbm-devel libffi-devel bzip2-devel
        
    else
        echo "Aviso: Gerenciador de pacotes não reconhecido!"
        echo "Por favor, instale manualmente os pacotes necessários:"
        echo "  - build-essential / Development Tools"
        echo "  - zlib1g-dev / zlib-devel"
        echo "  - libncurses5-dev / ncurses-devel"
        echo "  - libssl-dev / openssl-devel"
        echo "  - libreadline-dev / readline-devel"
        echo "  - libffi-dev / libffi-devel"
        echo "  - libsqlite3-dev / sqlite-devel"
        echo "  - libbz2-dev / bzip2-devel"
        echo "Pressione Enter para continuar sem instalar dependências..."
        read -r < /dev/tty
        return 0
    fi
    
    echo "Dependências de compilação instaladas com sucesso!"
    return 0
}

# Verifica se já existe instalação
check_existing_installation() {
    if [ -f "$DIR_PYTHONMAN/$TARGET" ]; then
        echo "Aviso: O $TARGET já está instalado em: $DIR_PYTHONMAN/$TARGET"
        read -p "Deseja sobrescrever? [s/N]: " response < /dev/tty
        if [[ ! "$response" =~ ^[Ss]$ ]]; then
            echo "Instalação cancelada."
            cleanup
            exit 0
        fi
        echo "Sobrescrevendo instalação existente..."
    fi
    return 0
}

# Cria estrutura de pastas
create_dir() {
    echo "Criando estrutura de diretórios..."
    if ! mkdir -p "$DIR_PYTHONMAN"; then
        echo "Erro: Falha ao criar diretório $DIR_PYTHONMAN"
        cleanup
        exit 1
    fi
    
    if ! mkdir -p "$DIR_PYTHON_VERSIONS"; then
        echo "Erro: Falha ao criar diretório $DIR_PYTHON_VERSIONS"
        cleanup
        exit 1
    fi
    
    echo "Diretórios criados:"
    echo "  - $DIR_PYTHONMAN"
    echo "  - $DIR_PYTHON_VERSIONS"
    return 0
}

# Download do pythonman
download_file() {
    echo "Baixando $TARGET..."
    if ! wget -q --show-progress "$URL_DOWNLOAD" -O "$TEMP_DIR/$TARGET"; then
        echo "Erro: Falha no download do $TARGET!"
        cleanup
        exit 1
    fi
    echo "Download concluído com sucesso!"
    return 0
}

# Instala o pythonman
install_file() {
    echo "Instalando $TARGET..."
    if ! chmod +x "$TEMP_DIR/$TARGET"; then
        echo "Erro: Falha ao dar permissões de execução ao $TARGET!"
        cleanup
        exit 1
    fi
    
    if ! mv -f "$TEMP_DIR/$TARGET" "$DIR_PYTHONMAN/$TARGET"; then
        echo "Erro: Falha ao mover $TARGET para $DIR_PYTHONMAN/"
        cleanup
        exit 1
    fi
    
    echo "$TARGET instalado em: $DIR_PYTHONMAN/$TARGET"
    return 0
}

# Configura path
configure_path() {
    local marker="# pythonman auto config"
    
    echo "Configurando ambiente..."
    
    if grep -q "$marker" "$FILE_BASHRC"; then
        echo "Configuração já existe no .bashrc (nada alterado)"
        return 0
    fi

    echo "" >> "$FILE_BASHRC"
    echo "$marker" >> "$FILE_BASHRC"
    echo 'export PATH="$PATH:$HOME/.pythonman"' >> "$FILE_BASHRC"
    echo 'if [ -f "$HOME/.pythonman/python_env" ]; then' >> "$FILE_BASHRC"
    echo '    source "$HOME/.pythonman/python_env"' >> "$FILE_BASHRC"
    echo 'fi' >> "$FILE_BASHRC"
    
    echo "Configuração adicionada ao .bashrc:"
    echo "  $marker"
    echo '  export PATH="$PATH:$HOME/.pythonman"'
    echo '  if [ -f "$HOME/.pythonman/python_env" ]; then'
    echo '      source "$HOME/.pythonman/python_env"'
    echo '  fi'
    return 0
}

# Função principal
main() {
    check_dependencies
    install_compilation_dependencies
    check_existing_installation
    download_file
    create_dir
    install_file
    configure_path
    
    CLEANUP_REQUIRED="no"
    cleanup
    
    echo ""
    echo "--------------------------------------------"
    echo "     Instalação concluída com sucesso !     "
    echo "--------------------------------------------"
    echo ""
    echo "Próximos passos:"
    echo "1. Recarregue o terminal ou execute:"
    echo "   source ~/.bashrc"
    echo "2. Verifique a instalação:"
    echo "   which $TARGET"
    echo "3. Veja os comandos disponíveis:"
    echo "   $TARGET ajuda"
    echo ""
    echo "Suporte: souzalb@proton.me"
    echo ""
}

# Executa instalação
main
